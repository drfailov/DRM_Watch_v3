
const byte groovyBlue[] = {
  125,
  0b10011101, 0b00100100, 0b00100100, 0b00100100, 0b00100100,
  0b10011000, 0b10011011, 0b10011000, 0b10011011, 0b10011101,
  0b00100100, 0b00100100, 0b00100100, 0b00100100, 0b10011000,
  0b10011011, 0b10011000, 0b10011011, 0b01011101, 0b10010001,
  0b01100100, 0b10010001, 0b01100100, 0b10010001, 0b01100100,
  0b10010001, 0b01100100, 0b10010001, 0b01100100, 0b10010001,
  0b01100100, 0b10011000, 0b10011011, 0b10011000, 0b10011011,
  0b01011101, 0b10011101, 0b01100100, 0b10011101, 0b01100100,
  0b10011101, 0b01100100, 0b10011101, 0b01100100, 0b10011101,
  0b01100100, 0b10011101, 0b01100100, 0b10011000, 0b10011011,
  0b10011000, 0b10011011, 0b01011101, 0b10011101, 0b01100000,
  0b10011101, 0b01100010, 0b10011101, 0b01100100, 0b10011101,
  0b01100000, 0b10011101, 0b10100010, 0b10100100, 0b10011101,
  0b01100100, 0b10011000, 0b10011011, 0b10011000, 0b10011011,
  0b01011101, 0b10011101, 0b01100000, 0b10011101, 0b01100010,
  0b10011101, 0b01100100, 0b10011101, 0b01100000, 0b10011101,
  0b10100010, 0b10100100, 0b10011101, 0b01100100, 0b10011000,
  0b10011011, 0b10011000, 0b10011011, 0b01011101, 0b10011101,
  0b01100000, 0b10011101, 0b01100011, 0b10011101, 0b01100010,
  0b10011101, 0b01100001, 0b10011101, 0b01100000, 0b10011101,
  0b01011111, 0b00100100, 0b10011000, 0b10011011, 0b10011000,
  0b10011011, 0b01011101, 0b11111111,
};
const byte blue[]  = {
    140,
    0b00001001, 0b00001010, 0b01000111, 0b01001010, 0b01001100, 
    0b01000101, 0b01001001, 0b00001010, 0b01000111, 0b01001010, 
    0b01001110, 0b00001111, 0b01001110, 0b01001100, 0b00001010, 
    0b01000111, 0b01001010, 0b01001100, 0b01000101, 0b01001001, 
    0b00001010, 0b01000111, 0b01001010, 0b01001110, 0b00001111, 
    0b01001110, 0b01001100, 0b00001010, 0b01000111, 0b01001010, 
    0b01001100, 0b01000101, 0b01001001, 0b00001010, 0b01000111, 
    0b01001010, 0b01001110, 0b00001111, 0b01001110, 0b01001100, 
    0b00001010, 0b01000111, 0b01001010, 0b01001001, 0b01000101, 
    0b01000101, 0b00000111, 0b11111111, 
};
const byte badinerie[]  = {
  125,
  0b01010111, 0b10011010, 0b10010111, 0b01010010, 0b10010111,
  0b10010010, 0b01001110, 0b10010010, 0b10001110, 0b00001011,
  0b10000110, 0b10001011, 0b10001110, 0b10001011, 0b10001101,
  0b10001011, 0b10001101, 0b10001011, 0b10001010, 0b10001101,
  0b10010000, 0b10001101, 0b01001110, 0b01001011, 0b01010111,
  0b10011010, 0b10010111, 0b01010010, 0b10010111, 0b10010010,
  0b01001110, 0b10010010, 0b10001110, 0b00001011, 0b01001110,
  0b01001110, 0b01001110, 0b01001110, 0b01010111, 0b01001110,
  0b11001110, 0b11001101, 0b11001110, 0b11001101, 0b01001101,
  0b01010010, 0b01010010, 0b01010010, 0b01010010, 0b01011010,
  0b01010010, 0b11010010, 0b11010001, 0b11010010, 0b11010001,
  0b01010001, 0b10001101, 0b10010010, 0b10010101, 0b10010010,
  0b10010100, 0b10010010, 0b10010100, 0b10010010, 0b10010001,
  0b10010100, 0b10010111, 0b10010100, 0b10010101, 0b10010100,
  0b10010101, 0b10010100, 0b10010010, 0b10010101, 0b10010010,
  0b10010001, 0b10010010, 0b10010111, 0b10010010, 0b10010001,
  0b10010010, 0b10011001, 0b10010010, 0b10010001, 0b10010010,
  0b10011010, 0b10010010, 0b10010001, 0b10010010, 0b10011010,
  0b10011001, 0b10010111, 0b10011001, 0b10010101, 0b10010100,
  0b10010010, 0b01010101, 0b01010100, 0b00010010, 0b11111111,
};
const byte mozart[]  = {
  240,
  0b01010101, 0b10010100, 0b10100100, 0b01010100, 0b01100100,
  0b01010101, 0b10010100, 0b10100100, 0b01010100, 0b01100100,
  0b01010101, 0b10010100, 0b10100100, 0b00010100, 0b00011100,
  0b00100100, 0b10100100, 0b01011100, 0b10011011, 0b10100100,
  0b01011001, 0b01100100, 0b01011001, 0b10010111, 0b10100100,
  0b01010101, 0b01100100, 0b01010101, 0b11100100, 0b10010100,
  0b10100100, 0b01010010, 0b01100100, 0b01010010, 0b00100100,
  0b01100100, 0b01010100, 0b11100100, 0b01010010, 0b11100100,
  0b01010010, 0b01100100, 0b01010100, 0b10010010, 0b10100100,
  0b01010010, 0b01100100, 0b01010100, 0b10010010, 0b10100100,
  0b00010010, 0b01011011, 0b00100100, 0b01100100, 0b01011011,
  0b01011001, 0b01011000, 0b01100100, 0b01011000, 0b01010101,
  0b01010100, 0b01100100, 0b11100100, 0b01010100, 0b01010010,
  0b01010000, 0b01100100, 0b01010000, 0b00100100, 0b01100100,
  0b01011100, 0b10011011, 0b10100100, 0b00011011, 0b00011110,
  0b00011000, 0b00011011, 0b00011001, 0b00010100, 0b00100100,
  0b01011100, 0b11100100, 0b10011011, 0b10100100, 0b00011011,
  0b00011110, 0b00011000, 0b00011011, 0b00011001, 0b00011100,
  0b01011011, 0b01011001, 0b01010111, 0b01010101, 0b00010100,
  0b00010011, 0b00010100, 0b00100100, 0b10001000, 0b10100100,
  0b10001000, 0b10100100, 0b00001000, 0b00100100, 0b10001000,
  0b10100100, 0b10001000, 0b10100100, 0b00001000, 0b00100100,
  0b10001000, 0b10100100, 0b10001000, 0b10100100, 0b01001000,
  0b01100100, 0b10001000, 0b10100100, 0b10001000, 0b10100100,
  0b01001000, 0b01100100, 0b10001000, 0b10100100, 0b10001000,
  0b10100100, 0b00001000, 0b11111111,
};
const byte mario[]  = {
  100,
  0b10010000, 0b10010000, 0b11100100, 0b01010000, 0b10001100,
  0b01010000, 0b01010011, 0b01100100, 0b01000111, 0b01100100,
  0b01001100, 0b10100100, 0b01000111, 0b10100100, 0b01000100,
  0b10100100, 0b01001001, 0b01001011, 0b10001010, 0b01001001,
  0b01000111, 0b10010000, 0b10010011, 0b01010101, 0b10010001,
  0b01010011, 0b01010000, 0b10001100, 0b10001110, 0b01001011,
  0b10100100, 0b01001100, 0b10100100, 0b01000111, 0b10100100,
  0b01000100, 0b10100100, 0b01001001, 0b01001011, 0b10001010,
  0b01001001, 0b01000111, 0b10010000, 0b10010011, 0b01010101,
  0b10010001, 0b01010011, 0b01010000, 0b10001100, 0b10001110,
  0b01001011, 0b01100100, 0b10010011, 0b10010010, 0b10010001,
  0b11111111,
};
const byte entertainer[]  = {
  140,
  0b01001110, 0b01001111, 0b01010000, 0b00011000, 0b01010000,
  0b00011000, 0b01010000, 0b00011000, 0b01011000, 0b01011010,
  0b01011011, 0b01011100, 0b01011000, 0b01011010, 0b00011100,
  0b01010111, 0b00011010, 0b00011000, 0b00100100, 0b01001110,
  0b01001111, 0b01010000, 0b00011000, 0b01010000, 0b00011000,
  0b01010000, 0b00011000, 0b01100100, 0b01010101, 0b01010011,
  0b01010010, 0b01010101, 0b01011000, 0b00011100, 0b01011010,
  0b01011000, 0b01010101, 0b00011010, 0b11111111,
};
const byte toreador[]  = {
  165,
  0b00011000, 0b00011010, 0b10011000, 0b00010101, 0b00010101,
  0b01010101, 0b10100100, 0b10010011, 0b00010101, 0b10010110,
  0b00010101, 0b00100100, 0b00010110, 0b00010011, 0b10011000,
  0b00010101, 0b00100100, 0b00010001, 0b00001110, 0b10010011,
  0b00001100, 0b00100100, 0b00010011, 0b01010011, 0b01011010,
  0b01011000, 0b01010110, 0b01010101, 0b11100100, 0b01010011,
  0b01010101, 0b01010110, 0b00010101, 0b00100100, 0b00010000,
  0b00010101, 0b00010101, 0b01010100, 0b01010111, 0b00011100,
  0b01100100, 0b11011010, 0b10011100, 0b11011010, 0b01011001,
  0b01011010, 0b01010011, 0b01010101, 0b00010110, 0b01100100,
  0b11010101, 0b10010110, 0b11010101, 0b01010001, 0b01011010,
  0b00011000, 0b00100100, 0b11010001, 0b10010011, 0b11010001,
  0b01001100, 0b01010110, 0b01010101, 0b01100100, 0b01010011,
  0b01100100, 0b01010001, 0b00100100, 0b00100100, 0b11111111,
};
const byte ukraine[] = {
    110,
    0b00010000, 0b01100100, 0b01010000, 0b01010000, 0b01001110, 
    0b01010000, 0b01010001, 0b00010011, 0b01100100, 0b01010001, 
    0b00010000, 0b00001110, 0b00001100, 0b00010000, 0b00001011, 
    0b00010000, 0b01001001, 0b01001000, 0b01001001, 0b01001011, 
    0b00001100, 0b00001110, 0b00010000, 0b01100100, 0b01010000, 
    0b01010000, 0b01001110, 0b01010000, 0b01010001, 0b00010011, 
    0b01100100, 0b01010001, 0b00010000, 0b00001110, 0b00001100, 
    0b00001001, 0b00010000, 0b00001000, 0b00001001, 0b00000100, 
    0b00001001, 0b11111111, 
};
const byte wasWollenWirTrinken[]  = {
  115,
    0b01001001, 0b01001001, 0b10000111, 0b10000110, 0b00000111, 
    0b00000100, 0b01000100, 0b01001001, 0b01001001, 0b01000111, 
    0b01000110, 0b01001001, 0b01001001, 0b10000111, 0b10000101, 
    0b00000111, 0b00000100, 0b01000110, 0b01000010, 0b00000100, 
    0b01100100, 0b01010101, 0b01010101, 0b10010011, 0b10010010, 
    0b00010011, 0b00010000, 0b01010000, 0b01010101, 0b01010101, 
    0b01010011, 0b01010010, 0b01010101, 0b01010101, 0b10010011, 
    0b10010001, 0b00010011, 0b00010000, 0b01010010, 0b01001110, 
    0b00010000, 0b01100100, 0b01010000, 0b01010011, 0b01010101, 
    0b00010111, 0b00010111, 0b01011000, 0b01010101, 0b00010111, 
    0b01100100, 0b01010101, 0b01010101, 0b10010011, 0b10010010, 
    0b00010011, 0b00010000, 0b01010000, 0b01010101, 0b01010101, 
    0b01010011, 0b01010010, 0b01010101, 0b01010101, 0b10010011, 
    0b10010001, 0b00010011, 0b00010000, 0b01010010, 0b01001110, 
    0b00010000, 0b11111111
};
const byte nokiaTune[] = {
  112,
  0b10011111, 0b10011101, 0b01010101, 0b01010111, 0b10011100,
  0b10011010, 0b01010001, 0b01010011, 0b10011010, 0b10011000,
  0b01010000, 0b01010011, 0b00011000, 0b11111111,
};


//----------------------//----------------------//----------------------//----------------------//----------------------//----------------------//----------------------



struct Melody {             
  String name;   
  const byte* data;         
  Melody(String _name, const byte* _data):name(_name), data(_data) {}
};    

Melody melodies[]={
  {"groovyBlue", groovyBlue},
  {"blue", blue},
  {"badinerie", badinerie},
  {"mozart", mozart},
  {"mario", mario},
  {"entertainer", entertainer},
  {"toreador", toreador},
  {"ukraine", ukraine},
  {"wasWollenWirTrinken", wasWollenWirTrinken},
  {"nokiaTune", nokiaTune}
};

int getMelodyCount(){
   return sizeof(melodies)/sizeof(melodies[0]);
}

String getMelodyName(int index){
   return melodies[index].name;
}

const byte* getMelodyData(int index){
   return melodies[index].data;
}





bool melodyPlayerLoopMelody = false;   

//return true if was played completely or false if interrupted
bool melodyPlayerPlayMelody(const byte* melody) {
  //displayTransition();
  melodyPlayerLoopMelody = false;
  do{
    melodyPlayerDrawScreen();
    //pinMode(pinBuzzer, OUTPUT);
    byte length = melodyPlayerGetLength(melody);
    float tempo = (melody[0]);
    float whole_notes_per_second = tempo / 240.0;
    for (byte i = 1; i < length - 1; i++) {
      byte b = (melody[i]);
      byte duration = 0;
      if (bitRead(b, 7) == 0 && bitRead(b, 6) == 0) duration = 4;
      if (bitRead(b, 7) == 0 && bitRead(b, 6) == 1) duration = 8;
      if (bitRead(b, 7) == 1 && bitRead(b, 6) == 0) duration = 16;
      if (bitRead(b, 7) == 1 && bitRead(b, 6) == 1) duration = 32;
      float timeMs = 1000.0 / (whole_notes_per_second * duration);
      byte noteNumberByte = 0;
      for (byte i = 0; i < 6; i++)
        bitWrite(noteNumberByte, i, bitRead(b, i));
      float noteNumber = noteNumberByte;
      // Note frequency is calculated as (F*2^(n/12)),
      // We can use C2=65.41, or C3=130.81. C2 is a bit shorter.
      float frequency = 0;
      //290 is ok
      if (noteNumber < 36)
        frequency = 250.0 * pow(2.0, (noteNumber / 12.0));
  
      long noteStarted = millis();
      if (frequency != 0){
        //displayBacklightOn();
        buzTone(frequency);
      }
      else{
        buzNoTone();
      }
      while(millis() - noteStarted < timeMs-150){
        melodyPlayerDrawScreen();
        if (isButtonUpPressed()){
          buzNoTone();
          return false;
        }
      }
      while(millis() - noteStarted < timeMs);
      buzNoTone();
      //displayBacklightOff();
      delay(13);
      
    //     if(isButtonUpHold()){
    //       melodyPlayerLoopMelody = !melodyPlayerLoopMelody;
    //       melodyPlayerDrawScreen();
    //     }
    //     else{
    //       displayBacklightOn();
    //       return false;
    //     }
    //   }
    }
    
    buzNoTone();
    //pinMode(pinBuzzer, INPUT);
    //delay(5000);
  }while(melodyPlayerLoopMelody);
  //displayBacklightOn();
  return true;
}

void melodyPlayerDrawScreen() {

  lcd()->setColorIndex(white);
  lcd()->drawBox(0, 0, 400, 240);

  lcd()->setFont(u8g2_font_10x20_t_cyrillic);  //ok
  lcd()->setCursor(5, 18); 
  lcd()->setColorIndex(black);
  lcd()->print("Плеєр");

  lcd()->print(millis());

  drawStatusbar(363, 1, true);
  lcd()->sendBuffer();
}

void printBits(byte myByte) {
  for (byte mask = 0x80; mask; mask >>= 1) {
    if (mask & myByte)
      Serial.print('1');
    else
      Serial.print('0');
  }
}

int melodyPlayerGetLength(const byte* melody) {
  for (byte i = 0; i < 254; i++) {
    byte b = (melody[i]);
    if (b == 0b11111111) {
      return i + 1;
    }
  }
  return 0;
}














